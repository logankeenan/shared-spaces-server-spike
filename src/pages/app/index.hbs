{{#> layout_page}}
    {{#*inline "page_content"}}
        <div class="container">
            <p>Loading...</p>
            <script type="text/javascript" src="node_modules/morphdom/dist/morphdom-umd.min.js"></script>
            <script type="text/javascript" src="node_modules/localforage/dist/localforage.min.js"></script>
            <script type="text/javascript" src="node_modules/js-md5/build/md5.min.js"></script>
            <script type="text/javascript" src="node_modules/uuid/dist/umd/uuidv4.min.js"></script>
            <script type="text/javascript" src="node_modules/simple-peer/simplepeer.min.js"></script>
            <script type="module">
                import init, {
                    app,
                    AppRequest,
                    websocket_on_open,
                    websocket_on_message,
                    websocket_on_close
                } from '/node_modules/@logankeenan/shared-space-app/shared_space_app.js';
                import '/static/webrtc-adapter.js';

                window.wsAdapter = {
                    activeConnectionOpenResolve: undefined,
                    activeConnectionOpenPromise: undefined,
                    activeConnection: undefined,
                    create: function (url) {
                        if (!this.activeConnection) {
                            this.activeConnectionOpenPromise = new Promise((resolve) => {
                                this.activeConnectionOpenResolve = resolve;
                            });
                            this.activeConnection = new WebSocket(url);
                            this.activeConnection.onopen = () => {
                                this.activeConnectionOpenResolve();
                                websocket_on_open();
                            };
                            this.activeConnection.onmessage = function (event) {
                                websocket_on_message(event.data);
                            };
                            this.activeConnection.onclose = function () {
                                console.log('web socket closed');
                                // try again ??
                                websocket_on_close();
                            };
                        }
                    },
                    sendMessage: async function(message) {
                        await this.activeConnectionOpenPromise;
                        this.activeConnection.send(message);
                    }
                }

                localforage.config({
                    name: 'shared-space-app',
                    version: 1.0,
                    driver: localforage.INDEXEDDB
                });

                async function readAsDataUrl(blob) {
                    return new Promise((resolve) => {
                        var reader = new FileReader();

                        reader.onload = function () {
                            resolve(reader.result);
                        }

                        reader.readAsDataURL(blob);
                    });
                }

                async function readAsBinaryString(blob) {
                    return new Promise((resolve) => {
                        var reader = new FileReader();

                        reader.onload = function () {
                            resolve(reader.result);
                        }

                        reader.readAsBinaryString(blob);
                    });
                }

                async function processRequest(request) {

                    let response = await app(request);

                    if (response.status_code === "303") {
                        window.location.hash = JSON.parse(response.headers).Location;

                    } else {
                        morphdom(document.documentElement, response.body, {
                            onNodeAdded: function (node) {
                                if (node.nodeName === 'SCRIPT') {
                                    var script = document.createElement('script');

                                    if (node.src) {
                                        script.src = node.src;
                                    }

                                    script.innerHTML = node.innerHTML;
                                    node.replaceWith(script)
                                }
                            }
                        });
                    }
                }

                document.addEventListener('submit', async function (event) {
                    event.preventDefault();

                    let form = event.target.closest('form');
                    var formData = new FormData(form);
                    let formObject = Object.fromEntries(formData.entries());

                    var object = await Object.keys(formObject).reduce(async function (acc, key) {
                        var accumulator = await acc;
                        var value = formObject[key];

                        if (value instanceof File) {
                            let blob = new Blob([value], {type: value.type});
                            let blobDataUrl = await readAsBinaryString(blob);
                            let hash = md5(blobDataUrl);

                            await localforage.setItem(hash, blob);
                            accumulator[key] = {
                                name: value.name,
                                last_modified: value.lastModified,
                                size: value.size,
                                file_type: value.type,
                                location: hash
                            }
                        } else {
                            accumulator[key] = value;
                        }

                        return Promise.resolve(accumulator);

                    }, Promise.resolve({}));

                    var formBodyAsJSON = JSON.stringify(object);

                    let url = form.action.replace(window.location.protocol + "//" + window.location.host, "");
                    let request = new AppRequest(url, form.method.toUpperCase());
                    request.body = formBodyAsJSON;

                    await processRequest(request);
                })


                async function run() {
                    await init();

                    let current_hash = window.location.hash;

                    if (!current_hash) {
                        window.location.hash = "#/files";

                        let request = new AppRequest("/files", "GET");

                        await processRequest(request);
                    } else {
                        let request = new AppRequest(current_hash.replace("#", ""), "GET");

                        await processRequest(request);
                    }
                }

                window.addEventListener('popstate', async function () {
                    let request = new AppRequest(window.location.hash.replace("#", ""), "GET");

                    await processRequest(request);
                });

                run();
            </script>
            <script>
                // let protocal = window.location.protocol == 'https:' && 'wss://' || 'ws://';
                // var wsUri = protocal + window.location.host + `/ws?id=${uuidv4()}&name=${new Date().getTime()}`;
                //
                // conn = new WebSocket(wsUri);
                // console.log('Connecting...');
                // conn.onopen = function () {
                //     console.log('Connected.');
                //     // conn.send("hello???");
                // };
                // conn.onmessage = function (e) {
                //     console.log('Received: ' + e.data);
                // };
                // conn.onclose = function () {
                //     console.log('Disconnected.');
                //     conn = null;
                //
                // };

                // window.conn = conn;
            </script>
        </div>
    {{/inline}}
{{/layout_page}}
